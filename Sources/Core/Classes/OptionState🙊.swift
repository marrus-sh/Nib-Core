//  #  Core :: OptionStateğŸ™Š  #
//
//  Copyright Â© 2021 kibigo!
//
//  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

/// An `OpenStateğŸ™Š` which points to two `StateğŸ™Š`s unconditionally.
internal final class OptionStateğŸ™Š <Atom>:
	OpenStateğŸ™Š<Atom>
where Atom : Atomic {

	var alternateForward: StateğŸ™Š? = nil

	unowned var alternateBackward: StateğŸ™Š? = nil

	/// The primary (not alternate) `StatesğŸ™Š` which this `OptionStateğŸ™Š` points to.
	///
	///  +  Authors:
	///     [kibigo!](https://go.KIBI.family/About/#me).
	private var primaryNextğŸ™ˆ: StatesğŸ™Š
	{ super.next }

	/// The `StatesğŸ™Š` which this `OptionStateğŸ™Š` points to.
	///
	/// This is computed lazily and follows `OptionStateğŸ™Š` paths.
	private lazy var nextğŸ™ˆ: StatesğŸ™Š = primaryNextğŸ™ˆ.union((alternateForward ?? alternateBackward).map { ($0 as? OptionStateğŸ™Š<Atom>)?.next ?? [$0] } ?? [.match])

	/// The `Set` of `StateğŸ™Š`s which this `OptionStateğŸ™Š` points to.
	///
	/// This is computed lazily and follows `OptionStateğŸ™Š` paths.
	///
	///  +  Authors:
	///     [kibigo!](https://go.KIBI.family/About/#me).
	override var next: StatesğŸ™Š
	{ nextğŸ™ˆ }

	/// The `StatesğŸ™Š` which this `OptionStateğŸ™Š` is equivalent to.
	///
	/// For `OptionStateğŸ™Š`s, this is equivalent to `next`.
	///
	///  +  Authors:
	///     [kibigo!](https://go.KIBI.family/About/#me).
	override var resolved: StatesğŸ™Š
	{ nextğŸ™ˆ }

}
