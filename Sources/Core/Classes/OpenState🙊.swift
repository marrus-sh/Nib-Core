//  #  Core :: OpenStateğŸ™Š  #
//
//  Copyright Â© 2021 kibigo!
//
//  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

/// A `StateğŸ™Š` which points to another `StateğŸ™Š`; a `StateğŸ™Š` other than `.match` or `.never`.
internal class OpenStateğŸ™Š <Atom>:
	StateğŸ™Š
where Atom : Atomic {

	/// A later `StateğŸ™Š` pointed to by this `OpenStateğŸ™Š`.
	var forward: StateğŸ™Š? = nil

	/// An earlier `StateğŸ™Š` pointed to by this `OpenStateğŸ™Š`.
	unowned var backward: StateğŸ™Š? = nil

	/// The `StatesğŸ™Š` which this `OpenStateğŸ™Š` will result in after a correct match (privately stored).
	///
	/// This is computed lazily and follows `OptionStateğŸ™Š` paths.
	private lazy var nextğŸ™ˆ: StatesğŸ™Š = (forward ?? backward).map { ($0 as? OptionStateğŸ™Š<Atom>)?.next ?? [$0] } ?? [.match]

	/// The `Set` of `StateğŸ™Š`s which this `OpenStateğŸ™Š` will result in after a correct match.
	///
	/// This is computed lazily and follows `OptionStateğŸ™Š` paths.
	///
	///  +  Authors:
	///     [kibigo!](https://go.KIBI.family/About/#me).
	override var next: StatesğŸ™Š
	{ nextğŸ™ˆ }

	/// Returns whether this `OpenStateğŸ™Š` does consume the provided `element`.
	///
	/// This is a default implementation which always returns `true`.
	///
	///  +  Authors:
	///     [kibigo!](https://go.KIBI.family/About/#me).
	///
	///  +  Parameters:
	///      +  element:
	///         A `SourceElement` of this `OpenStateğŸ™Š`â€™s `Atom` type.
	///
	///  +  Returns:
	///     `true` if this `OpenStateğŸ™Š` does consume the provided `element`; `false` otherwise.
	func consumes (
		_ element: Atom.SourceElement
	) -> Bool
	{ true }

}
