<!--
üñãüçé Nib Core :: Documentation :: ü§∑ Knowability
================================================

Copyright ¬© 2021 kibigo!

This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
-->

Many internet specifications distinguish between *knowability* (whether a value is **_known_** or **_unknown_**) and *presence* (whether a value is **_present_** or **_absent_**).
For example, the X¬∑M¬∑L Infoset specification [has this to say](http://www.w3.org/TR/xml-infoset/#intro.null):‚Äî

> Some properties may sometimes have the value <dfn><strong>unknown</strong></dfn> or <dfn><strong>no value</strong></dfn>, and it is said that a property value is unknown or that a property has no value respectively.
> These values are distinct from each other and from all other values.
> In particular they are distinct from the empty string, the empty set, and the empty list, each of which simply has no members.
> This specification does not use the term <strong>null</strong> since in some communities it has particular connotations which may not match those intended here.

Values of optional presence are easily represented in Swift using the `Optional` type.
For values of uncertain knowability, üñãüçé Nib Core provides the `Uncertain` type, which behaves like `Optional` in most cases (sans certain language conveniences only available to `Optional`s).

Unlike `Optional`s, it is not possible to create an unowned `Uncertain` value.
To get around this, üñãüçé Nib Core provides the `Deed` type.
`Deed`s are simple wrappers for object references, which may be either owned or unowned.
The `Uncertain.known(unowned:)` static method is provided to ease the use of `Uncertain` values with unowned `Deed`s.
